window.addEventListener('load', function () {
    modeTheme();
    openModal();
    get_dialogs();
    console.log('hack');
});

var CallbackRegistry = {}; // —Ä–µ–µ—Å—Ç—Ä
var token;
var global_id;
// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
const openModal = () => {
    payload = `<div>
    <h1>–ü—Ä–∏–≤–µ—Ç!üëã</h1>
    <div>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>
    <br>
    <label for="token">–¢–æ–∫–µ–Ω (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π <a href="https://oauth.vk.com/authorize?client_id=2685278&display=page&redirect_uri=https://oauth.vk.com/blank.html&scope=2064127&response_type=token&v=5.122">—Ç—É—Ç</a>):</label>
    <br>
    <input type="text" id="token" name="token" required minlength="8">
    <br>
    <br>
    <label for="id_user">id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏</label>
    <br>
    <input type="text" id="id_user" name="id_user" required>
    <br>
    <br>
    <input id="save" value="–ü–æ–≥–Ω–∞–ª–∏!" type="button" onclick="get_chat(document.getElementById('token').value, document.getElementById('id_user').value)"></input>
    
    </div>`;

    var panel = document.querySelector(".page_wrap");
    console.log(panel);
    var newModel = document.createElement('div');
    newModel.setAttribute("id", "open-modal");
    newModel.className = "modal-window overlayDiv";
    newModel.innerHTML = payload;
    panel.appendChild(newModel);
    return newModel;
}

const openModalTools = () => {
    payload = `<div>
    <a onclick="document.getElementById('open-modal').remove();" title="Close" class="modal-close" id="close-a">Close</a>
    <h1>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h1>
    <div>–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è</div>
    <br>
    <label for="id_friend_add">–í–≤–µ–¥–∏—Ç–µ id</label>
    <br>
    <input type="text" id="id_friend_add" name="id" required minlength="8">
    <input id="add_friend_button" value="–î–æ–±–∞–≤–∏—Ç—å" type="button" onclick="add_friend(document.getElementById('id_friend_add').value)"></input>
    <br>
    <br>    
    <div>–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π</div>
    <br>
    <label for="id_friend_remove">id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏</label>
    <br>
    <input type="text" id="id_friend_remove" name="id" required>
    <input id="add_friend_button" value="–£–¥–∞–ª–∏—Ç—å" type="button" onclick="remove_friend(document.getElementById('id_friend_remove').value)"></input>
    <br>
    <br>
    <div>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞</div>
    <br>
    <label for="id_account_ban">id –±–ª–æ–∫–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
    <br>
    <input type="text" id="id_account_ban" name="id" required>
    <input id="id_account_ban_button" value="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" type="button" onclick="account_ban(document.getElementById('id_account_ban').value)"></input>
    <br>
    <br>
    
    </div>`;

    var panel = document.querySelector(".page_wrap");
    console.log(panel);
    var newModel = document.createElement('div');
    newModel.setAttribute("id", "open-modal");
    newModel.className = "modal-window overlayDiv";
    newModel.innerHTML = payload;
    panel.appendChild(newModel);
    return newModel;
}

const get_chat = (token, id) => {
    // –£–±–∏—Ä–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    var elem = document.getElementById('open-modal');
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if (elem != null){
        console.log(elem);
        elem.parentNode.removeChild(elem);
    }
    else{
        // –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫—É–Ω–¥—ã
        let timerId = setInterval(() => {
            var elem = document.getElementById('open-modal');
            if (elem != null){
                console.log(elem);
                elem.parentNode.removeChild(elem);
            }
            this.token = token;
            this.global_id = id;
        }, 2000);

        // –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => { clearInterval(timerId); }, 5000);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
    if (token !== '' || token !== ''){
        this.token = token;
        global_id = id;
    }
    else{
        console.log('–û—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ')
    }
    console.log('–¢–æ–∫–µ–Ω: ', this.token, ' –∏ id ', this.global_id);
    // –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–ø–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    vk_api('messages.getHistory', this.token, this.global_id, null, 0)
};

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
const usersget = (result) => {
    console.log(result.response);
    document.getElementById('first_name').innerHTML = (result.response[0].first_name + ' ' + result.response[0].last_name);
};

// –î–ª—è –∞–ø–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
const vk_api = async (method, param1, param2, param3, param4) => {
    // VK –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CORS, –æ–±—Ö–æ–¥–∏–º —Å —Å–æ–µ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JSONP
    var script = document.createElement('SCRIPT');
    var offset = Number(param4);
    if (method === 'messages.getHistory')
        console.log('–ü–æ–ª—É—á–∞–µ–º –°–ú–°');
    script.src = `https://api.vk.com/method/${method}?access_token=${param1}&user_id=${param2}&fields=${param3}&offset=${offset}&count=20&v=5.131&callback=${method.replace('.', '')}`;
    document.getElementsByTagName("head")[0].appendChild(script);
    document.getElementsByTagName("head")[0].removeChild(script);
};

const get_profile = async (result, param1, param2, param3) => {
    // VK –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CORS, –æ–±—Ö–æ–¥–∏–º —Å —Å–æ–µ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JSONP
    if (await result !== null){
        CallbackRegistry[result.response[0].id] = result.response[0];
        //console.log(CallbackRegistry);
        return await result.response[0];
    }
    else{
        (async () => {
            var script = document.createElement('SCRIPT');
            script.src = `https://api.vk.com/method/users.get?access_token=${param1}&user_ids=${param2}&fields=photo_100&v=5.131&callback=get_profile}`;
            document.getElementsByTagName("head")[0].appendChild(script);
            document.getElementsByTagName("head")[0].removeChild(script);
        })();
    }
};

const get_video = async (result, param1, param2, param3) => {
    // VK –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CORS, –æ–±—Ö–æ–¥–∏–º —Å —Å–æ–µ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JSONP
    if (await result !== null){
        console.log(result);
        CallbackRegistry[result.response.items[0].owner_id + '_' + result.response.items[0].id] = result.response.items[0].player;
        console.log(CallbackRegistry);
        return await result.response.items[0].player;
    }
    else{
        (async () => {
            var script = document.createElement('SCRIPT');
            var own_id = Number(param2);
            script.src = `https://api.vk.com/method/video.get?access_token=${param1}&owner_id=${own_id}&videos=${param3}&v=5.131&callback=get_video}`;
            document.getElementsByTagName("head")[0].appendChild(script);
            document.getElementsByTagName("head")[0].removeChild(script);
        })();
    }
};


// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ id
/**
 * 
 * @param id –ò–Ω–¥–∏—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è
 * @returns –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–º–∏—Å–∞
 * 
 * TODO: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ CallbackRegistry. –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–Ω–æ
 * !–ß–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—é—Ç—Å—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
 */
function get_profile_info_for_id(id) {
    get_profile(null, token, id.toString(), null);
    return new Promise((resolve, reject) => {

        let timerId = setTimeout(() => {
            if (typeof CallbackRegistry[id.toString()] !== 'undefined')
            {
                //console.log('–î–æ–∂–¥–∞–ª–∏—Å—å');
                //console.log(CallbackRegistry[id.toString()]);
                clearTimeout(timerId);
                resolve(CallbackRegistry[id.toString()]);
            }
        }, 700);
    });
}

function get_video_player(owner_id, id) {
    get_video(null, token, owner_id.toString(), owner_id.toString() + "_" + id.toString());
    return new Promise((resolve, reject) => {

        let timerId = setTimeout(() => {
            if (typeof CallbackRegistry[owner_id.toString() + "_" + id.toString()] !== 'undefined')
            {
                //console.log('–î–æ–∂–¥–∞–ª–∏—Å—å');
                //console.log(CallbackRegistry[id.toString()]);
                clearTimeout(timerId);
                resolve(CallbackRegistry[owner_id.toString() + "_" + id.toString()]);
            }
        }, 1000);
    });
}

var count = 0;
var available;
// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async function  messagesgetHistory(result)  {
    // –ò—â–µ–º –≤ –∫–∞–∫–æ–π —Ç–µ–≥ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    var listMessages = document.querySelector('.history');
    var available_scroll = true;
    console.log(result);
    // –ß–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    vk_api('users.get', token, this.global_id);
    console.log(count);
    //console.log(await get_profile_info_for_id(309424939));
    var temp;
    console.log(global_id);
    available = false;
    
    for (var i of result.response.items)
    {
        var id = i.from_id.toString();
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —á–∞—Ç–∞
        var data = await get_profile_info_for_id(id);

        var not_avaible_attach = '';
        for (var at of i.attachments)
        {
            console.log('–ê—Ç—Ç–∞—á', at);
            if (at.type == 'sticker')
                not_avaible_attach += '<br><b>–°—Ç–∏–∫–µ—Ä</> +50‚ÇΩ';
            if (at.type == 'doc')
                not_avaible_attach += '<br><b>–î–æ–∫—É–º–µ–Ω—Ç</> +50‚ÇΩ';
            if (at.type == 'wall')
                not_avaible_attach += '<br><b>–ó–∞–ø–∏—Å—å —Å–æ —Å—Ç–µ–Ω—ã</> +50‚ÇΩ';
            if (at.type == 'gift')
                not_avaible_attach += '<br><b>–ó–∞–ø–∏—Å—å —Å–æ —Å—Ç–µ–Ω—ã</> +50‚ÇΩ';
            if (at.type == 'story')
                not_avaible_attach += '<br><b>–ò—Å—Ç–æ—Ä–∏—è</> +50‚ÇΩ';
            if (at.type == "photo")
                not_avaible_attach += `<br><img src="${at.photo.sizes[1].url}" onclick="javascript:window.open('${at.photo.sizes[Object.keys(at.photo.sizes).length-1].url}', '_blank');"></img>`;
            if (at.type == "video") {
                var player = await get_video_player(at.video.owner_id, at.video.id);
                not_avaible_attach += `<br><iframe src="${player}" style="
                width: 400px;
            " width="640" height="360" width="-webkit-fill-available" frameborder="0" allowfullscreen="1" allow="autoplay; encrypted-media; fullscreen; picture-in-picture"></iframe>`;
            }
            if (at.type == "audio_message")
                not_avaible_attach += `<br><audio controls>
                <source src="${at.audio_message.link_ogg}" type="audio/ogg; codecs=vorbis">
                <source src="${at.audio_message.link_mp3}" type="audio/mpeg">
                –¢–µ–≥ audio –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º. 
                <a href="${at.audio_message.link_mp3}">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å</a>.
              </audio>`
        }

        
        var payload = ``;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (id === temp)
        {
            
            if(typeof i['reply_message'] !== 'undefined')
            {
                payload = `<div class="reply_to details">
            In reply to <a href="#go_to_message${i.reply_message.id}"
                   onclick="return GoToMessage(${i.reply_message.id})">this message</a>
     </div>`;
            }
            payload += `<div class="message default clearfix joined" id="message${i.id}">

            <div class="body">

                   <div class="pull_right date details" title="${decode_unixtime(i.date)}">
                   ${decode_unixtime(i.date)}
                   </div>

                   <div class="text">
                   ${i.text}
                   ${not_avaible_attach}
                   </div>

            </div>

     </div>`;
        }
        else
        {
            if(typeof i['reply_message'] !== 'undefined')
            {
                payload = `<div class="reply_to details">
            In reply to <a href="#go_to_message${i.reply_message.id}"
                   onclick="return GoToMessage(${i.reply_message.id})">this message</a>
     </div>`;
            }
        payload += `
        <div class="pull_left userpic_wrap">

                <div class="userpic userpic8" style="width: 42px; height: 42px">

                        <div class="initials" style="line-height: 42px">
                            <img src='${data.photo_100}' 
                            style = "width: 42px;
                            height: 42px;"
                        />
                        </div>

                </div>

        </div>

        <div class="body">

                <div class="pull_right date details" title="${decode_unixtime(i.date)}">
                        ${decode_unixtime(i.date)}
                </div>

                <div class="from_name">
                        ${data.first_name}
                </div>

                <div class="text">
                    ${i.text}
                    
                    ${not_avaible_attach}
                </div>

        </div>
        `;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        var newModel = document.createElement('div');
        newModel.setAttribute("id", `message${i.id}`);
        newModel.className = "message default clearfix";
        newModel.innerHTML = payload;
        listMessages.appendChild(newModel);
        console.log(i.text);

        
        temp = id;
    }

    
    count += 20;
    var scroll_area = document.querySelector('.chat-area');
    scroll_area.onscroll = function(ev) {
        if ((scroll_area.offsetHeight  + scroll_area.scrollTop ) >= scroll_area.scrollHeight) {
            if (available_scroll && available)
            {
                vk_api('messages.getHistory', token, global_id, null, count);
            }
            available_scroll = false;
            available = false;
        }
    };
    available = true;
}

// Docode UNIX 
const decode_unixtime = (unix_timestamp) => {
    // Create a new JavaScript Date object based on the timestamp
    // multiplied by 1000 so that the argument is in milliseconds, not seconds.
    var date = new Date(unix_timestamp * 1000);
    // Hours part from the timestamp
    var hours = date.getHours();
    // Minutes part from the timestamp
    var minutes = "0" + date.getMinutes();
    // Seconds part from the timestamp
    var seconds = "0" + date.getSeconds();
    // Will display time in 10:30:23 format
    var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
    return formattedTime;
}


// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è
const add_friend = (id_friend) => {
    (async () => {
        var script = document.createElement('SCRIPT');
        script.src = `https://api.vk.com/method/friends.add?access_token=${this.token}&user_id=${id_friend}&v=5.131&callback=add_friend_callback}`;
        document.getElementsByTagName("head")[0].appendChild(script);
        document.getElementsByTagName("head")[0].removeChild(script);
    })();
}

const add_friend_callback = (result) => {
    if (result.response === 1)
        alert('–∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    else if(result.response === 2)
        alert('–∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–æ–±—Ä–µ–Ω–∞');
    else if(result.response === 4)
        alert('–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏');
    else {
        alert('–∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞');
        console.log(result);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–∑–µ–π
const remove_friend = (id_friend) => {
    (async () => {
        var script = document.createElement('SCRIPT');
        script.src = `https://api.vk.com/method/friends.delete?access_token=${this.token}&user_id=${id_friend}&v=5.131&callback=remove_friend_callback}`;
        document.getElementsByTagName("head")[0].appendChild(script);
        document.getElementsByTagName("head")[0].removeChild(script);
    })();
}

const remove_friend_callback = (result) => {
    if(result.response['friend_deleted'] !== undefined)
        alert('–±—ã–ª —É–¥–∞–ª–µ–Ω –¥—Ä—É–≥');
    else if(result.response['out_request_deleted'] !== undefined)
        alert('–æ—Ç–º–µ–Ω–µ–Ω–∞ –∏—Å—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞');
    else if(result.response['in_request_deleted'] !== undefined)
        alert('–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –≤—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞');
    else if(result.response['suggestion_deleted'] !== undefined)
        alert('–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥—Ä—É–≥–∞');
    else {
        alert('–∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞');
        console.log(result);
    }
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const account_ban = (id_block) => {
    (async () => {
        var script = document.createElement('SCRIPT');
        var id_block_number = Number(id_block);
        script.src = `https://api.vk.com/method/account.ban?access_token=${this.token}&owner_id=${id_block_number}&v=5.131&callback=account_ban_callback}`;
        document.getElementsByTagName("head")[0].appendChild(script);
        document.getElementsByTagName("head")[0].removeChild(script);
    })();
}

const account_ban_callback = (result) => {
    if (result.response === 1)
    {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫');
    }
    else {
        alert('–∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞');
        console.log(result);
    }
}

var count_dialogs = 0;
// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
const get_dialogs = () => {
    (async () => {
        var script = document.createElement('SCRIPT');
        script.src = `https://api.vk.com/method/messages.getConversations?access_token=${this.token}&offset=${count_dialogs}&v=5.131&callback=get_dialogs_callback}`;
        document.getElementsByTagName("head")[0].appendChild(script);
        document.getElementsByTagName("head")[0].removeChild(script);
    })();
}

const get_dialogs_callback = async (result) => {
    
    var overlayObject = document.querySelector('.overlay');
    if (overlayObject !== null){
        console.log(overlayObject);
        overlayObject.parentElement.removeChild(overlayObject);
    }
    
    
    var available_scroll = true;
    var panel_dialogs = document.querySelector('.conversation-area');
    for(var dialog of result.response.items)
    {
        var data;
        if (dialog.conversation.peer.type === 'user')
        {
            data = await get_profile_info_for_id(dialog.conversation.peer.id);

            payload = `<img class="msg-profile"
            src="${data.photo_100}" alt="" />
            <div class="msg-detail">
                <div class="msg-username">${data.first_name}</div>
                <div class="msg-content">
                    <span class="msg-message">${dialog.last_message.text}</span>
                    <span class="msg-date">${decode_unixtime(1660497426)}</span>
                </div>
            </div>`;

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥

            var newModel = document.createElement('div');
            newModel.className = `msg`;
            newModel.setAttribute("id", `${dialog.conversation.peer.id}`);
            newModel.onclick = function () {
                get_new_chat(this.id);
            };
            newModel.innerHTML = payload;
            panel_dialogs.appendChild(newModel);
        }

        console.log(dialog);
        
    }


    var scroll_area_dialogs = document.querySelector('.conversation-area');
    scroll_area_dialogs.onscroll = function(ev) {
        if ((scroll_area_dialogs.offsetHeight  + scroll_area_dialogs.scrollTop ) >= scroll_area_dialogs.scrollHeight) {
            if (available_scroll)
            {
                count_dialogs += 20;
                get_dialogs();
                //vk_api('messages.getHistory', token, global_id, null, count);
            }
            available_scroll = false;
        }
    };

    var overlayObject = document.createElement('div');
    overlayObject.className = "overlay";
    panel_dialogs.appendChild(overlayObject);
}

const get_new_chat = (new_id) => {
    if (available)
    {
        available = false;

        count = 0;

        const myNode = document.querySelector(".history");
        myNode.innerHTML = '';

        get_chat(token, new_id);
    }
    else
        alert("–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç—Ç–∏–º –¥–∏–∞–ª–æ–≥–æ–≤. –ò –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
}

// –¥–ª—è —Ç–µ—Å—Ç–∞
get_chat('vk1.a.Vww4WwDXotBzXTaKYAPMxyuyCTAKQrdWw9cX5clTnyq64BygLW7Vc50qjKqXtbPG9OeXfdAEwKM-nnDhdOrgsZuZdLdlpsXD4u_H7OAcBwGqLRYyiBrQORGlCBUAdtucVhNgyQNaTcbnWJCKxbTxgF9Jip6E8T495g5CrQ-g-XQPdNYFwQdYM6IM82l4dXKh', '470231617')